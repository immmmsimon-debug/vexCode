{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"Ju^,`N#NBV`Ls$T+s~I$\"><field name=\"MOTOR\">Cata</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"H-YcGp=V:opb+fj1%LMI\"><field name=\"NUM\">125</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"!h8/f!M_OaSZ6K.-(uXU\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"v.ReZszK]y2_o8Q3X!_{\"><field name=\"NUM\">125</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"cm)htdip%,i]v!bQih~X\"><field name=\"MOTOR\">Lift</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"mT%y.2NKY*ymt_S6P[/j\"><field name=\"NUM\">125</field></shadow></value></block></next></block></next></block></next></block><block type=\"v5_events_when_autonomous\" id=\";vzPe(l%+XI}!w2e4|~Q\" x=\"510\" y=\"270\"><next><block type=\"v5_motion_spin\" id=\"$7uY^)_uT$YyC4%l~9El\"><field name=\"MOTOR\">Cata</field><field name=\"DIRECTION\">rev</field></block></next></block><block type=\"v5_events_when_controller_button\" id=\"V(,15r6?~MB=@Y?s#[/`\" x=\"50\" y=\"450\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_motion_spin\" id=\"l~x)wF$8HXfV3#cX+~=@\"><field name=\"MOTOR\">Cata</field><field name=\"DIRECTION\">rev</field></block></next></block><block type=\"v5_events_when_controller_button\" id=\"_Zyt[trvJ53b(}grmM#{\" x=\"130\" y=\"610\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_motion_stop_motor\" id=\"(O=z%3Y#959+~Qbi30DY\"><field name=\"MOTOR\">Cata</field></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Cata","leftDir":"false","right":"Lift","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[1,3,7,8,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5],"name":"Cata","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[11,12],"name":"Lift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[1],"name":"DigitalInA","customName":false,"deviceType":"DigitalIn","deviceClass":"digital_in","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"DigitalInB","customName":false,"deviceType":"DigitalIn","deviceClass":"digital_in","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.1","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT3, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT7, ratio18_1, true);\nmotor rightMotorB = motor(PORT8, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor Cata = motor(PORT5, ratio18_1, false);\n\nmotor LiftMotorA = motor(PORT11, ratio18_1, true);\nmotor LiftMotorB = motor(PORT12, ratio18_1, false);\nmotor_group Lift = motor_group(LiftMotorA, LiftMotorB);\n\ndigital_in DigitalInA = digital_in(Brain.ThreeWirePort.A);\ndigital_in DigitalInB = digital_in(Brain.ThreeWirePort.B);\n\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control Cata\n      if (Controller1.ButtonL1.pressing()) {\n        Cata.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Cata.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Cata.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Lift\n      if (Controller1.ButtonR1.pressing()) {\n        Lift.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Lift.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Lift.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Cata.setVelocity(125.0, percent);\n  Drivetrain.setDriveVelocity(125.0, percent);\n  Lift.setVelocity(125.0, percent);\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Cata.spin(reverse);\n  return 0;\n}\n\n// \"when Controller1 ButtonUp pressed\" hat block\nvoid onevent_Controller1ButtonUp_pressed_0() {\n  Cata.spin(reverse);\n}\n\n// \"when Controller1 ButtonDown pressed\" hat block\nvoid onevent_Controller1ButtonDown_pressed_0() {\n  Cata.stop();\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // register event handlers\n  Controller1.ButtonUp.pressed(onevent_Controller1ButtonUp_pressed_0);\n  Controller1.ButtonDown.pressed(onevent_Controller1ButtonDown_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}